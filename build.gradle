plugins {
	id 'org.springframework.boot' version '2.2.0.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
}

sourceCompatibility = '1.8'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	compile 'org.springframework.boot:spring-boot-starter-test'
	compile 'com.h2database:h2:1.3.148'
	//compile 'mysql-connector-java:mysql:8.0.18'
	compile 'com.datastax.cassandra:cassandra-driver-core:4.0.0'
	compile 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
	compile 'org.springframework.cloud:spring-cloud-starter-config:2.1.5.RELEASE'
	compile "org.springframework.boot:spring-boot-starter-actuator"
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	//runtimeOnly 'mysql:mysql-connector-java'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
	testLogging {
		afterSuite { desc, result ->
			if (!desc.parent) { // will match the outermost suite
				println("${result.resultType} " +
						"(${result.testCount} tests, " +
						"${result.successfulTestCount} successes, " +
						"${result.failedTestCount} failures, " +
						"${result.skippedTestCount} skipped)")
			}
		}
	}

}